import SwiftUI

struct Message: Identifiable {
    let id = UUID()
    let text: String
    let isUser: Bool
}

struct ChatView: View {
    @State private var messages: [Message] = [
        Message(text: "What's up MyG, feel free to shoot any questions you may have regarding your workout or macros! Let's smash new PR's together", isUser: false)
    ]
    @State private var inputText = ""
    @State private var isLoading = false
    @AppStorage("userId") private var userId: String = ""

    var body: some View {
        VStack {
            ScrollViewReader { proxy in
                ScrollView {
                    LazyVStack(alignment: .leading, spacing: 10) {
                        ForEach(messages) { message in
                            HStack {
                                if message.isUser {
                                    Spacer()
                                }
                                Text(message.text)
                                    .padding()
                                    .foregroundColor(message.isUser ? .white : .primary)
                                    .background(message.isUser ? Color.blue : Color.gray.opacity(0.2))
                                    .cornerRadius(20)
                                    .frame(maxWidth: .infinity, alignment: message.isUser ? .trailing : .leading)
                                if !message.isUser {
                                    Spacer()
                                }
                            }
                            .id(message.id)
                        }

                        if isLoading {
                            HStack {
                                ProgressView()
                                    .progressViewStyle(CircularProgressViewStyle())
                                Text("Coach is thinking...")
                                    .font(.caption)
                                    .foregroundColor(.gray)
                            }
                            .padding(.leading)
                        }
                    }
                    .padding()
                    .onChange(of: messages.count) { _ in
                        proxy.scrollTo(messages.last?.id, anchor: .bottom)
                    }
                }
            }

            HStack {
                TextField("Type a message...", text: $inputText)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding(.leading)

                Button(action: sendMessage) {
                    Image(systemName: "paperplane.fill")
                        .foregroundColor(.white)
                        .padding(10)
                        .background(Color.accentColor)
                        .clipShape(Circle())
                }
                .disabled(inputText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
            }
            .padding()
        }
        .navigationTitle("AI Coach")
    }

    private func sendMessage() {
        let question = inputText.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !question.isEmpty else { return }

        messages.append(Message(text: question, isUser: true))
        inputText = ""
        isLoading = true

        let url = URL(string: "https://aed5-175-156-215-114.ngrok-free.app/ai/ai-coach")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let payload = ["userId": userId, "question": question]
        request.httpBody = try? JSONSerialization.data(withJSONObject: payload)

        URLSession.shared.dataTask(with: request) { data, _, error in
            DispatchQueue.main.async {
                self.isLoading = false
            }

            if let error = error {
                DispatchQueue.main.async {
                    self.messages.append(Message(text: "❌ Error: \(error.localizedDescription)", isUser: false))
                }
                return
            }

            guard let data = data,
                  let json = try? JSONSerialization.jsonObject(with: data) as? [String: String],
                  let response = json["response"] else {
                DispatchQueue.main.async {
                    self.messages.append(Message(text: "❌ Invalid response from server.", isUser: false))
                }
                return
            }

            DispatchQueue.main.async {
                self.messages.append(Message(text: response, isUser: false))
            }
        }.resume()
    }
}

#Preview{
    ChatView()
}
